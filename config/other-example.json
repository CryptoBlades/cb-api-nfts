{
  "name": "Example",
  "type": "other-example",
  "collection": "myCollection",
  "template": "Character.vue", // the file name of your vue component (see the template example below)
  "preprocessor": "cb-character.js", // the file name of the preprocessor script (see the preprocessor example below)
  "image": "generator", // "ipfs or generator. (If generator, please provide the 'artsgenerator' file")
  "artsgenerator": "cb-character.js", //(optional) the file name of your nft image/arts generator. (see the artsgenerator example below)
  "token": {
    "method": "get", // the contract method to retrieve the token data
    "contractAddress": { 
      "test": {  // testnet contract addresses
        "BSC": "0x12345....." 
      },
      "production": { // mainnet contract addresses
        "BSC": "0x12345....."
      }
    }
  },
  "abi": {
    "filename": "Characters.json", // the file name of your contract ABI
    "source": "https://app.cryptoblades.io/abi/Characters.json" // the source where your contract ABI is retrievable
  },
  "ui": {
    "pagination": { // do not edit this
      "perPage": 60 
    }, 
    "sortValues": { // do not edit this
      "asc": "1", 
      "desc": "-1" 
    },
    "sorts": [ // Do not remove `id` and `price`. You can add your custom sorting. Your custom sorting's apiField must be preceded by `props.`. Example: props.element
      { "name": "id", "apiField": "id" },
      { "name": "price", "apiField": "price" }
    ],
    "filters": { // Your custom filters.
      "element": { // query type of the filter
        "name": "Element", // name of the filter
        "apiField": "element", // apiField
        "type": "checkbox", // input type. possible values: `text`, `number`, `select`, `checkbox`
        "props": { "values": ["Fire", "Earth", "Water", "Lightning"] } // input properties. for `checkbox` and `select` types, `values` should contain the enumerated options
      },
      "minLevel": {
        "name": "Min Level",
        "apiField": "level.min", // range filters must be followed by `min` for minimum and `max` for maximum
        "type": "number",
        "props": { "value": 0, "min": 0, "max": 254, "step": 1 }
      },
      "maxLevel": {
        "name": "Max Level",
        "apiField": "level.max",
        "type": "number",
        "props": { "value": 254, "min": 0, "max": 254, "step": 1 }
      }
    }
  }
}
